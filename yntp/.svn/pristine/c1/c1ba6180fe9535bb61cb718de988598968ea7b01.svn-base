package com.yn.yntp.module.hotel.web;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.tuple.ImmutableTriple;
import org.apache.commons.lang3.tuple.Triple;
import org.hibernate.type.BasicType;
import org.hibernate.type.StandardBasicTypes;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.yn.yntp.common.entity.pagination.PaginationResult;
import com.yn.yntp.common.entity.response.ServiceResponse;
import com.yn.yntp.common.entity.search.ClientOperation;
import com.yn.yntp.common.entity.search.QueryConstants;
import com.yn.yntp.common.persistence.search.SearchCommonUtil;
import com.yn.yntp.common.web.controller.BaseCRUDWithImageController;
import com.yn.yntp.common.web.vo.SelectOptionVO;
import com.yn.yntp.module.hotel.entity.HotelRoomEntity;
import com.yn.yntp.module.hotel.entity.HotelRoomImageEntity;
import com.yn.yntp.module.hotel.entity.RoomBathTypeEnum;
import com.yn.yntp.module.hotel.entity.RoomBreakfastTypeEnum;
import com.yn.yntp.module.hotel.entity.RoomBroadbandTypeEnum;
import com.yn.yntp.module.hotel.entity.RoomWindowsTypeEnum;

/**
 * 
 * @Title: HotelRoomController.java 
 * @Package com.yn.yntp.module.hotel.web 
 * @Description: TODO(用一句话描述该文件做什么) 
 *
 * @author liucc    
 * @date 2015年1月16日 下午2:47:23 
 * @version V1.0 
 */

@Controller
@RequestMapping("/admin/business/hotelroom")
public class HotelRoomController extends
    BaseCRUDWithImageController<HotelRoomEntity, Long> {

  static Map<String, BasicType> filedNameMap = new HashMap<String, BasicType>();
  static {
    filedNameMap.put("id", StandardBasicTypes.LONG);
    filedNameMap.put("imagekey", StandardBasicTypes.STRING);
    filedNameMap.put("hotelRoomTypeEntity.id", StandardBasicTypes.LONG);
  }
  
  /**
   * 根据商家id和条件查询列表，只查询部分列
   * 
   * @param model
   * @param queryString
   * @return
   */
  @RequestMapping(value = "/search/{hotelid}/roomlist", params = {QueryConstants.Q_PARAM}, method = RequestMethod.GET)
  @ResponseBody
  public Object getroomlist(Model model,@PathVariable("hotelid") final Long hotel_id,
      @RequestParam(QueryConstants.Q_PARAM) final String queryString) {

    ServiceResponse<List<HotelRoomEntity>> ret = new ServiceResponse<List<HotelRoomEntity>>();

    List<Triple<String, ClientOperation, String>> parsedQuery = null;
    // 根据用户条件构造查询三元组
    parsedQuery = SearchCommonUtil.parseQueryString(queryString);

    if(parsedQuery == null){
      parsedQuery =  new ArrayList<Triple<String, ClientOperation, String>>();
    }
    // 添加商家id
    parsedQuery.add(new ImmutableTriple<String, ClientOperation, String>("hotel_id", ClientOperation.EQ, String.valueOf(hotel_id)));
    
    // 后台管理列表只显示特定列，不需要显示所有的数据，这样能节省带宽
    ret.setData(getBaseService().query(parsedQuery));
    return ret;
  }

  /**
   * 根据商家id和条件查询列表，只查询部分列
   * 
   * @param queryString
   * @param page
   * @param size
   * @return
   */
  @RequestMapping(value = "/pagesearch/{hotelid}/roomlist", params = {
    QueryConstants.Q_PARAM, QueryConstants.START, QueryConstants.SIZE
  }, method = RequestMethod.GET)
  @ResponseBody
  public Object searchAllPaginated(Model model,
      @PathVariable("hotelid") final Long hotel_id,
      @RequestParam(QueryConstants.Q_PARAM) final String queryString,
      @RequestParam(value = QueryConstants.START) final int start,
      @RequestParam(value = QueryConstants.SIZE) final int size,
      HttpServletRequest request) {

    ServiceResponse<PaginationResult<HotelRoomEntity>> ret =
        new ServiceResponse<PaginationResult<HotelRoomEntity>>();

    List<Triple<String, ClientOperation, String>> parsedQuery = null;
    parsedQuery = SearchCommonUtil.parseQueryString(queryString);
    if (null == parsedQuery) {
      parsedQuery = new ArrayList<Triple<String, ClientOperation, String>>();
    }
 
    // 添加商家id
    parsedQuery.add(new ImmutableTriple<String, ClientOperation, String>("hotel_id", ClientOperation.EQ, String.valueOf(hotel_id)));

    ret.setData(getBaseService().query(start, size, parsedQuery));
    return ret;
  }
  
  //------------------------------ createWithImage ----------------------------------
  /**
   * 新增一个资源。带图片
   * 
   * @param resource
   */
  @RequestMapping(value = "/{hotelid}/createwithimage", method = RequestMethod.POST)
  @ResponseBody
  public Object createWithImage(Model model,
      @Validated @RequestBody HotelRoomImageEntity resource,
      BindingResult result, HttpServletRequest request) {
    ServiceResponse<Object> ret;
    HotelRoomEntity currentEntity = resource.getCurrentEntity();
    
    ret = (ServiceResponse<Object>) super.create(model, currentEntity, result);
    if (ret.getRetcode() == "100000") {
      return ret;
    }

    // 处理上传的图片，因为有上传，但是删除的，那么需要将删除的图片从服务器删除
    List<String> avilabelImageList = resource.getImagelist();
    ServletContext sc = request.getSession().getServletContext();
    String serverBase = sc.getRealPath("/");

    imageUploader.clearUnUsedImage(serverBase, avilabelImageList, currentEntity.getImagekey());
    return ret;
  }

  // ------------------------------ updateWithImage ----------------------------------
  /**
   * 更新资源。带图片
   * 
   * @param id
   * @param resource
   */
  @RequestMapping(value = "/{hotelid}/updatewithimage/{id}" ,method = RequestMethod.POST)
  @ResponseBody
  public Object updateWithImage(Model model, @PathVariable("id") final Long id,
      @Validated @RequestBody HotelRoomImageEntity resource,
      BindingResult result,
      HttpServletRequest request) {
    ServiceResponse<Object> ret; 
    HotelRoomEntity currentEntity = resource.getCurrentEntity();
    
    ret = (ServiceResponse<Object>) super.update(model, id, currentEntity, result);
    if(ret.getRetcode()=="100000"){
      return ret;
    }
    
    // 处理上传的图片，因为有上传，但是删除的，那么需要将删除的图片从服务器删除
    List<String> avilabelImageList = resource.getImagelist();
    ServletContext sc = request.getSession().getServletContext();
    String serverBase = sc.getRealPath("/");
    imageUploader.clearUnUsedImage(serverBase,avilabelImageList,currentEntity.getImagekey());
    return ret;
  }

  //------------------------------ deleteWithImage ----------------------------------
  /**
   * 删除线路时，需要将线路下面的行程，删除之前需要判断是否有订单，评论。。。。
   */
  @Override
  public Object deleteWithImage(Model model, @PathVariable("id") final Long id,
      @ModelAttribute final HotelRoomEntity resource,
      HttpServletRequest request) {
    ServiceResponse<Object> ret = (ServiceResponse<Object>) super.delete(model, id);
    
    if(ret.getRetcode()=="100000"){
      return ret;
    }
    
    // 删除逻辑。。删除线路，删除行
    // 删除图片
    ServletContext sc = request.getSession().getServletContext();
    String serverBase = sc.getRealPath("/");

    imageUploader.clearFolderImage(serverBase, resource.getImagekey());
    return ret;
  }
  
  //------------------------------ query data ----------------------------------
  /**
   * 查询早餐类型
   * 
   * @return
   */
  @RequestMapping(value = "/breakfasttype/getselectmodel")
  @ResponseBody
  public Object searchBreakfastSelectModel(){
    ServiceResponse<List<SelectOptionVO>> ret = new ServiceResponse<List<SelectOptionVO>>();
    
    List<SelectOptionVO> optionList = new ArrayList<SelectOptionVO>();
    for (RoomBreakfastTypeEnum item : RoomBreakfastTypeEnum.values()){
      SelectOptionVO option = new SelectOptionVO(item.getId(),item.getName());
      optionList.add(option);
    }
    ret.setData(optionList);
    return ret;
  }
  /**
   * 查询窗户类型
   * 
   * @return
   */
  @RequestMapping(value = "/windowstype/getselectmodel")
  @ResponseBody
  public Object searchWindowsSelectModel(){
    ServiceResponse<List<SelectOptionVO>> ret = new ServiceResponse<List<SelectOptionVO>>();
    
    List<SelectOptionVO> optionList = new ArrayList<SelectOptionVO>();
    for (RoomWindowsTypeEnum item : RoomWindowsTypeEnum.values()){
      SelectOptionVO option = new SelectOptionVO(item.getId(),item.getName());
      optionList.add(option);
    }
    ret.setData(optionList);
    return ret;
  }
  /**
   * 查询卫浴类型
   * 
   * @return
   */
  @RequestMapping(value = "/bathtype/getselectmodel")
  @ResponseBody
  public Object searchBathSelectModel(){
    ServiceResponse<List<SelectOptionVO>> ret = new ServiceResponse<List<SelectOptionVO>>();
    
    List<SelectOptionVO> optionList = new ArrayList<SelectOptionVO>();
    for (RoomBathTypeEnum item : RoomBathTypeEnum.values()){
      SelectOptionVO option = new SelectOptionVO(item.getId(),item.getName());
      optionList.add(option);
    }
    ret.setData(optionList);
    return ret;
  }
  /**
   * 查询宽带类型
   * 
   * @return
   */
  @RequestMapping(value = "/broadbandtype/getselectmodel")
  @ResponseBody
  public Object searchBroadbandSelectModel(){
    ServiceResponse<List<SelectOptionVO>> ret = new ServiceResponse<List<SelectOptionVO>>();
    
    List<SelectOptionVO> optionList = new ArrayList<SelectOptionVO>();
    for (RoomBroadbandTypeEnum item : RoomBroadbandTypeEnum.values()){
      SelectOptionVO option = new SelectOptionVO(item.getId(),item.getName());
      optionList.add(option);
    }
    ret.setData(optionList);
    return ret;
  }
}