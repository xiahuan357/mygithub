package com.yn.yntp.module.scenic.web;

import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.yn.yntp.common.constant.Constants;
import com.yn.yntp.common.entity.response.ServiceResponse;
import com.yn.yntp.common.web.controller.BaseCRUDWithImageController;
import com.yn.yntp.common.web.vo.SelectOptionVO;
import com.yn.yntp.module.scenic.entity.ScenicEntity;
import com.yn.yntp.module.scenic.entity.ScenicImageEntity;
import com.yn.yntp.module.scenic.service.ScenicService;
import com.yn.yntp.module.sys.user.entity.UserEntity;

/**
 * 
 * @Title: ScenicController.java
 * @Package com.yn.yntp.module.scenic.web
 * @Description: 线路类型信息维护，登录用户使用
 *
 * @author liucc
 * @date 2014年11月22日 下午3:40:39
 * @version V1.0
 */

@Controller
@RequestMapping("/admin/business/scenic")
public class ScenicController extends BaseCRUDWithImageController<ScenicEntity, Long> {

	@Autowired
	private ScenicService scenicService;
	
	
	 /**
	   * 查询满足给定查询条件的信息。
	   * 
	   * @param queryString
	   * @return
	   */
	  @RequestMapping(value = "/getscenictype", method = RequestMethod.GET)
	  @ResponseBody
	  public Object getScenicType(Model model) {

	    ServiceResponse<List<SelectOptionVO>> ret = new ServiceResponse<List<SelectOptionVO>>();
	    
	    ret.setData(scenicService.queryScenicType());
	    return ret;
	  }
	  
	  @RequestMapping(value = "/getsceniclevel", method = RequestMethod.GET)
	  @ResponseBody
	  public Object getScenicLevel(Model model) {

	    ServiceResponse<List<SelectOptionVO>> ret = new ServiceResponse<List<SelectOptionVO>>();
	    
	    ret.setData(scenicService.queryScenicLevel());
	    return ret;
	  }
	  
	  @RequestMapping(value = "/getscenicregion/{region_id}", method = RequestMethod.GET)
	  @ResponseBody
	  public Object getScenicRegion(Model model,@PathVariable("region_id") final String region_id) {

		ServiceResponse<List<SelectOptionVO>> ret = new ServiceResponse<List<SelectOptionVO>>();
        
		ret.setData(scenicService.queryScenicRegion(region_id));
		return ret;
	
	  }
	  //------------------------------ createWithImage ----------------------------------
	  /**
	   * 新增一个资源。带图片
	   * 
	   * @param resource
	   */
	  @RequestMapping(value = "/{businessid}/createwithimage", method = RequestMethod.POST)
	  @ResponseBody
	  public Object createWithImage(Model model,
	      @Validated @RequestBody ScenicImageEntity resource,
	      BindingResult result, HttpServletRequest request) {
	    ServiceResponse<Object> ret;
	    ScenicEntity currentEntity = resource.getCurrentEntity();
	    
	    ret = (ServiceResponse<Object>) super.create(model, currentEntity, result);
	    if (ret.getRetcode() == "100000") {
	      return ret;
	    }

	    // 处理上传的图片，因为有上传，但是删除的，那么需要将删除的图片从服务器删除
	    List<String> avilabelImageList = resource.getImagelist();
	    ServletContext sc = request.getSession().getServletContext();
	    String serverBase = sc.getRealPath("/");

	    imageUploader.clearUnUsedImage(serverBase, avilabelImageList, currentEntity.getImagekey());
	    return ret;
	  }

	  // ------------------------------ updateWithImage ----------------------------------
	  /**
	   * 更新资源。带图片
	   * 
	   * @param id
	   * @param resource
	   */
	  @RequestMapping(value = "/{businessid}/updatewithimage/{id}" ,method = RequestMethod.POST)
	  @ResponseBody
	  public Object updateWithImage(Model model, @PathVariable("id") final Long id,
	      @Validated @RequestBody ScenicImageEntity resource,
	      BindingResult result,
	      HttpServletRequest request) {
	    ServiceResponse<Object> ret; 
	    // 获取用户
	    ScenicEntity currentEntity = resource.getCurrentEntity();
	    
	    ret = (ServiceResponse<Object>) super.update(model, id, currentEntity, result);
	    if(ret.getRetcode()=="100000"){
	      return ret;
	    }
	    
	    // 处理上传的图片，因为有上传，但是删除的，那么需要将删除的图片从服务器删除
	    List<String> avilabelImageList = resource.getImagelist();
	    ServletContext sc = request.getSession().getServletContext();
	    String serverBase = sc.getRealPath("/");
	    imageUploader.clearUnUsedImage(serverBase,avilabelImageList,currentEntity.getImagekey());
	    return ret;
	  }

	  /**
	   * 删除线路时，需要将线路下面的行程，删除之前需要判断是否有订单，评论。。。。
	   */
	  @Override
	  public Object deleteWithImage(Model model, @PathVariable("id") final Long id,
	      @ModelAttribute final ScenicEntity resource,
	      HttpServletRequest request) {
	    ServiceResponse<Object> ret = (ServiceResponse<Object>) super.delete(model, id);
	    
	    if(ret.getRetcode()=="100000"){
	      return ret;
	    }
	    
	    // 删除逻辑。。删除线路，删除行
	    // 删除图片
	    ServletContext sc = request.getSession().getServletContext();
	    String serverBase = sc.getRealPath("/");

	    imageUploader.clearFolderImage(serverBase, resource.getImagekey());
	    return ret;
	  }

	}

