package com.yn.yntp.module.tourismline.web;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.tuple.ImmutableTriple;
import org.apache.commons.lang3.tuple.Triple;
import org.hibernate.type.BasicType;
import org.hibernate.type.StandardBasicTypes;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.yn.yntp.common.entity.pagination.PaginationResult;
import com.yn.yntp.common.entity.response.ServiceResponse;
import com.yn.yntp.common.entity.search.ClientOperation;
import com.yn.yntp.common.entity.search.QueryConstants;
import com.yn.yntp.common.persistence.search.SearchCommonUtil;
import com.yn.yntp.common.web.controller.BaseCRUDWithImageController;
import com.yn.yntp.module.tourismline.entity.TourismlineEntity;
import com.yn.yntp.module.tourismline.service.TourismlineService;

/**
 * 
 * @Title: TourismController.java
 * @Package com.yn.yntp.module.tourism.web
 * @Description: 线路信息维护，登录用户使用
 *
 * @author liucc
 * @date 2014年11月22日 下午3:40:39
 * @version V1.0
 */

@Controller
@RequestMapping("/admin/business/tourismline")
public class TourismlineController extends BaseCRUDWithImageController<TourismlineEntity, Long> {

  private TourismlineService getTourismlineService() {
    return (TourismlineService) getBaseService();
  }

  static Map<String, BasicType> filedNameMap = new HashMap<String, BasicType>();
  static {
    filedNameMap.put("id", StandardBasicTypes.LONG);
    filedNameMap.put("name", StandardBasicTypes.STRING);
    filedNameMap.put("price", StandardBasicTypes.DOUBLE);
    filedNameMap.put("imagekey", StandardBasicTypes.STRING);
  }
  
  /**
   * 根据商家id和条件查询列表，只查询部分列
   * 
   * @param model
   * @param queryString
   * @return
   */
  @RequestMapping(value = "/search/{id}/tourismlinelist", params = {QueryConstants.Q_PARAM}, method = RequestMethod.GET)
  @ResponseBody
  public Object getTourismlineList(Model model,@PathVariable("id") final Long business_id,
      @RequestParam(QueryConstants.Q_PARAM) final String queryString) {

    ServiceResponse<List<TourismlineEntity>> ret = new ServiceResponse<List<TourismlineEntity>>();

    List<Triple<String, ClientOperation, String>> parsedQuery = null;
    // 根据用户条件构造查询三元组
    parsedQuery = SearchCommonUtil.parseQueryString(queryString);

    if(parsedQuery == null){
      parsedQuery =  new ArrayList<Triple<String, ClientOperation, String>>();
    }
    // 添加商家id
    parsedQuery.add(new ImmutableTriple<String, ClientOperation, String>("business_id", ClientOperation.EQ, String.valueOf(business_id)));
    
    // 后台管理列表只显示特定列，不需要显示所有的数据，这样能节省带宽
    ret.setData(getBaseService().query(filedNameMap, parsedQuery));
    return ret;
  }

  /**
   * 根据商家id和条件查询列表，只查询部分列
   * 
   * @param queryString
   * @param page
   * @param size
   * @return
   */
  @RequestMapping(value = "/pagesearch/{id}/tourismlinelist", params = {
    QueryConstants.Q_PARAM, QueryConstants.START, QueryConstants.SIZE
  }, method = RequestMethod.GET)
  @ResponseBody
  public Object searchAllPaginated(Model model,
      @PathVariable("id") final Long business_id,
      @RequestParam(QueryConstants.Q_PARAM) final String queryString,
      @RequestParam(value = QueryConstants.START) final int start,
      @RequestParam(value = QueryConstants.SIZE) final int size,
      HttpServletRequest request) {

    ServiceResponse<PaginationResult<TourismlineEntity>> ret =
        new ServiceResponse<PaginationResult<TourismlineEntity>>();

    List<Triple<String, ClientOperation, String>> parsedQuery = null;
    parsedQuery = SearchCommonUtil.parseQueryString(queryString);
    if (null == parsedQuery) {
      parsedQuery = new ArrayList<Triple<String, ClientOperation, String>>();
    }
 
    // 添加商家id
    parsedQuery.add(new ImmutableTriple<String, ClientOperation, String>("business_id", ClientOperation.EQ, String.valueOf(business_id)));

    ret.setData(getBaseService().query(start, size, filedNameMap, parsedQuery));
    return ret;
  }
  
  /**
   * 删除线路时，需要将线路下面的行程，删除之前需要判断是否有订单，评论。。。。
   */
  @Override
  public Object deleteWithImage(Model model, @PathVariable("id") final Long id,
      @ModelAttribute final TourismlineEntity resource,
      HttpServletRequest request) {
    ServiceResponse<Object> ret = (ServiceResponse<Object>) super.delete(model, id);
    
    if(ret.getRetcode()=="100000"){
      return ret;
    }
    // 删除逻辑。。删除线路，删除行
    // 删除图片
    ServletContext sc = request.getSession().getServletContext();
    String serverBase = sc.getRealPath("/");

    imageUploader.clearFolderImage(serverBase, resource.getImagekey());
    return ret;
  }

}
