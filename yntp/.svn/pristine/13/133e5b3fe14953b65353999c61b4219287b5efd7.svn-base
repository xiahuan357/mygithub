package com.yn.yntp.common.web.controller.upload;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.coobird.thumbnailator.Thumbnails;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;

import com.yn.yntp.common.constant.ModuleEnum;
import com.yn.yntp.common.entity.response.ServiceResponse;

/**
 * 
 * @Title: ImageLibraryUploadController.java 
 * @Package com.yn.yntp.common.web.controller.upload 
 * @Description: TODO(用一句话描述该文件做什么) 
 *
 * @author liucc    
 * @date 2015年1月17日 下午5:58:37 
 * @version V1.0 
 */

@RequestMapping("/imagelibrary")
@Controller
public class ImageLibraryUploadController extends BaseImageUploadController {
  /**
   * 为商品或是需要显示缩略图和大图的模块上传图片
   * 一个图片会生成中图，小图
   * 中图：以M-开头
   * 小图：以S-开头
   * 
   * @param request
   * @param response
   * @param itemtype 模块类型，特产，线路，酒店。。。等
   * @param imagekey
   * @return
   * @throws IOException
   */
  @RequestMapping(value = "/imageupload/ueditorpicupload/{moduletype}", method = RequestMethod.POST)
  @ResponseBody
  public Map uEditorPicUploadForImageLibrary(
      MultipartHttpServletRequest request, HttpServletResponse response,
      @PathVariable("moduletype") String moduletype,
      @RequestParam("imagekey") String imagekey) throws IOException {
    ServletContext sc = request.getSession().getServletContext();
    String serverBase = sc.getRealPath("/");

    // 设置上下方文
    CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(request.getSession().getServletContext());
    // 返回结果
    Map<String, String> retMap = new HashMap<String, String>();
    // 检查form是否有enctype="multipart/form-data"
    if (multipartResolver.isMultipart(request)) {
      MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;

      Iterator<String> iter = multiRequest.getFileNames();
      while (iter.hasNext()) {
        // 由CommonsMultipartFile继承而来,拥有上面的方法.
        MultipartFile file = multiRequest.getFile(iter.next());
        if (file != null) {
          String fileKey = imagekey;
          // 获得图片地址
          String targetFolder = serverBase + uploadPath + fileKey;
          fileOpt.createFolder(targetFolder);
          String newFileName = getNewFileName(file.getOriginalFilename());
          String relativePath = uploadPath + fileKey + "/" + newFileName;
          String path = serverBase + relativePath;

          ScaleImageInfo scaleInfo = ModuleType.getScaleImageInfo(moduletype);
          // 生成中图
          Thumbnails.of(file.getInputStream())  
          .size(scaleInfo.getM_width(), scaleInfo.getM_height())  
          .toFile(serverBase + uploadPath + fileKey + "/" + scaleInfo.M_Prefix + newFileName);
          
          // 生成小图
          Thumbnails.of(file.getInputStream())  
          .size(scaleInfo.getS_width(), scaleInfo.getS_height())  
          .toFile(serverBase + uploadPath + fileKey + "/" + scaleInfo.S_Prefix + newFileName);
          
          // 不上传原图，只上传中图和小图
//          File localFile = new File(path);
//          file.transferTo(localFile);

          // 记录上传的文件
          if (uploadedImageFileMap.containsKey(fileKey)) {
            uploadedImageFileMap.get(fileKey).add(projectBase + uploadPath + fileKey + "/" + scaleInfo.M_Prefix + newFileName);
            uploadedImageFileMap.get(fileKey).add(projectBase + uploadPath + fileKey + "/" + scaleInfo.S_Prefix + newFileName);
          }
          else {
            List<String> imageList = new ArrayList<String>();
            imageList.add(projectBase + uploadPath + fileKey + "/" + scaleInfo.M_Prefix + newFileName);
            imageList.add(projectBase + uploadPath + fileKey + "/" + scaleInfo.S_Prefix + newFileName);
            uploadedImageFileMap.put(fileKey, imageList);
          }

          // 返回信息，只返回小图
          retMap.put("original", file.getOriginalFilename());
          retMap.put("url", uploadPath + fileKey + "/" + scaleInfo.S_Prefix + newFileName);
          retMap.put("title", "");
          retMap.put("state", "SUCCESS");
        }
      }
    }
    return retMap;
  }
  
  /**
   * 删除文件库中的文件，传进来的是小图的文件名，需要将中图和小图同时删掉
   * 
   * @param serverBase
   * @param deleteImageList
   * @param imageKey
   */
  @RequestMapping(value = "/imageupload/deleteimage", method = RequestMethod.POST)
  @ResponseBody
  public Object deleteImageLibrary(HttpServletResponse response,HttpServletRequest request,
      @RequestParam("imagekey") String imageKey,
      @RequestBody List<String> deleteImageList) {
    ServiceResponse<String> ret = new ServiceResponse<String>();
    ServletContext sc = request.getSession().getServletContext();
    String serverBase = sc.getRealPath("/");
    
    // 获得图片地址，据对路径
    String targetFolderPath = serverBase + uploadPath + imageKey;
    File imageFoder = new File(targetFolderPath);

    List<String> deleteImageNameList = new ArrayList<String>();
    for (String image : deleteImageList) {
      int lastSpitIndex = image.lastIndexOf("/");
      // 因为生成的图片含有S_和M_前缀，所以每次删除，都需要将中图和大图删除
      deleteImageNameList.add(image.substring(lastSpitIndex + 1 + 2));
    }

    // 获得文件夹下面的所有文件
    String[] imageList = imageFoder.list();
    if (imageList == null || imageList.length == 0)
      return ret;

    // 如果文件夹下面的文件没有被使用，则需要删除
    for (String exsitImage : imageList) {
      if (deleteImageNameList.contains(exsitImage.substring(2))) {
        // 游离文件，删除
        String deleteImagePath = targetFolderPath + "/" + exsitImage;
        File crtFile = new File(deleteImagePath);
        File parentDir = crtFile.getParentFile();
        fileOpt.delFile(deleteImagePath);
        // 如果父亲文件夹空了，删除之
        if (parentDir != null && parentDir.list().length == 0) {
          parentDir.delete();
        }
      }
    }
    return ret;
  }
  
  /**
   * 根据图片key获得图库中的所有小图
   * 
   * @param response
   * @param request
   * @param imageKey
   * @return
   */
  @RequestMapping(value = "/imageupload/getallimagelibrary", method = RequestMethod.POST)
  @ResponseBody
  public Object getImageLibraryList(HttpServletResponse response,HttpServletRequest request,
      @RequestParam("imagekey") String imageKey){
    ServiceResponse<List<ImageLibraryItemVO>> ret = new ServiceResponse<List<ImageLibraryItemVO>>();
    
    ServletContext sc = request.getSession().getServletContext();
    String serverBase = sc.getRealPath("/");
    
    // 获得图片地址，据对路径
    String targetFolderPath = serverBase + uploadPath + imageKey;
    File imageFoder = new File(targetFolderPath);

    // 获得文件夹下面的所有文件
    String[] imageList = imageFoder.list();
    if (imageList == null || imageList.length == 0)
      return ret;

    List<ImageLibraryItemVO> imageLibraryList = new ArrayList<ImageLibraryItemVO>();
    for (String exsitImage : imageList) {
      if(exsitImage.startsWith(ScaleImageInfo.S_Prefix)){
        String imageFullPath = projectBase + uploadPath + imageKey + "/" + exsitImage;
        ImageLibraryItemVO itemVO = new ImageLibraryItemVO();
        itemVO.setFileName(imageFullPath);
        imageLibraryList.add(itemVO);
      }
    }
    
    ret.setData(imageLibraryList);
    return ret;
  }
}

class ModuleType{
  public static ScaleImageInfo getScaleImageInfo(String moduletype){
    ScaleImageInfo info = new ScaleImageInfo();
    switch(ModuleEnum.toModule(moduletype.toUpperCase())){
      case CAR :
      case EQUIPMENT:
      case HOTEL:
      case HOTSPRING:
        info.setM_width(500);
        info.setM_height(380);
        info.setS_width(265);
        info.setS_height(230);
        break;
      case FOOD:
        info.setM_width(500);
        info.setM_height(380);
        info.setS_width(328);
        info.setS_height(440);
        break;
      case NATIONALFEATURE:
      case NATIONALSPECIAL:
      case SCENIC:
      case TOURISMLINE:
      case HOTELROOM:
      case SCENICTICKET:
      case TOURISMLINETRIP:
        info.setM_width(500);
        info.setM_height(380);
        info.setS_width(200);
        info.setS_height(150);
    }
    return info;
  }
}

class ScaleImageInfo {
  // 大图前缀
  public static String B_Prefix = "B_";

  // 中图前缀
  public static String M_Prefix = "M_";

  // 小图前缀
  public static String S_Prefix = "S_";

  private Integer B_width;

  private Integer B_height;

  private Integer M_width;

  private Integer M_height;

  private Integer S_width;

  private Integer S_height;

  public Integer getB_width() {
    return this.B_width;
  }

  public void setB_width(Integer b_width) {
    B_width = b_width;
  }

  public Integer getB_height() {
    return this.B_height;
  }

  public void setB_height(Integer b_height) {
    B_height = b_height;
  }

  public Integer getM_width() {
    return this.M_width;
  }

  public void setM_width(Integer m_width) {
    M_width = m_width;
  }

  public Integer getM_height() {
    return this.M_height;
  }

  public void setM_height(Integer m_height) {
    M_height = m_height;
  }

  public Integer getS_width() {
    return this.S_width;
  }

  public void setS_width(Integer s_width) {
    S_width = s_width;
  }

  public Integer getS_height() {
    return this.S_height;
  }

  public void setS_height(Integer s_height) {
    S_height = s_height;
  }

}
